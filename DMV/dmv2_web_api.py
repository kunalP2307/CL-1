# -*- coding: utf-8 -*-
"""DMV2_WEB_API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1icnhjvVdKLB00rukKP9hO1w7qPBHeibb
"""

import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

res = requests.post('http://api.openweathermap.org/data/2.5/forecast?lat=18.603710&lon=73.789467&appid=b98cd749f2e01e5d88624ea6f0446d3d')

json_res = res.json()

weather_data = []

for w_object in json_res['list']:
    time_stamp = w_object['dt']
    temp = w_object['main']['temp'] - 273.15
    temp_min = w_object['main']['temp_min'] - 273.15
    temp_max = w_object['main']['temp_max'] - 273.15
    pressure = w_object['main']['pressure']
    humidity = w_object['main']['humidity']
    clouds = w_object['clouds']['all']
    wind_speed = w_object['wind']['speed']
    wind_deg = w_object['wind']['deg']

    weather_data.append([
        time_stamp, temp, temp_min, temp_max, pressure, humidity, clouds, wind_speed, wind_deg
    ])

df = pd.DataFrame(weather_data, columns=['time_stamp', 'temp', 'temp_min', 'temp_max', 'pressure', 'humidity', 'clouds', 'wind_speed', 'wind_deg'])
print(df.head())

df.describe()

df.columns

df.dtypes



df.isnull().sum()

#converting UTC time to date and hours

df['time_stamp'] = pd.to_datetime(df['time_stamp'], unit='s')

df['time_stamp'].head()

df['date'] = df['time_stamp'].dt.date

df['hour'] = df['time_stamp'].dt.hour

df.drop(columns=['time_stamp'], inplace=True)

df = df[['date', 'hour', 'temp', 'temp_min', 'temp_max', 'pressure', 'humidity', 'clouds', 'wind_speed', 'wind_deg']]

df.head()

daily_avg_temp = df.groupby('date')['temp'].mean().reset_index()

daily_avg_temp.head()

plt.figure(figsize=(12,6))
plt.plot(daily_avg_temp['date'], daily_avg_temp['temp'], marker='o', linestyle='-')
plt.xlabel('Date')
plt.ylabel('Average Temperature')
plt.title('Average Daily Temperatures')
plt.grid(True)
plt.show()



daily_min_temp = df.groupby('date')['temp'].min().reset_index()
daily_max_temp = df.groupby('date')['temp'].max().reset_index()

daily_min_temp.head()

daily_avg_temp.head()



plt.figure(figsize=(12,3))
plt.plot(daily_min_temp['date'], daily_min_temp['temp'], marker='o', linestyle='-', label='Minimum Temperature')
plt.plot(daily_max_temp['date'], daily_max_temp['temp'], marker='o', linestyle='-', label='Maximum Temperature')
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.title('Maximum and Minimum Temperatures')
plt.grid(True)
plt.show()



plt.figure(figsize=(12,3))
plt.bar(daily_avg_temp.date, daily_avg_temp.temp, width = 0.3, label= "Average Temperature", align='center', color='blue')
plt.bar(daily_min_temp.date, daily_max_temp.temp, width = 0.3, label= "Minimum Temperature", align='edge', color='green')
plt.bar(daily_max_temp.date, daily_max_temp.temp, width = 0.3, label= "Maximum Temperature", align='edge', color='red')
plt.xlabel('Date')
plt.ylabel('Temeprature in *C')
plt.title("Temperature (Average, Minimum, Maximum) for Each Dat")
plt.legend()
plt.grid(axis='y')
plt.xticks(rotation=45)
plt.show()



#Scatter plots for temperature, humidity, pressure,clouds and wind_spedd

columns_to_plot = ['temp', 'humidity', 'pressure', 'clouds', 'wind_speed']
sns.pairplot(df[columns_to_plot])
plt.subplots_adjust(top= 0.95)
plt.show()

























